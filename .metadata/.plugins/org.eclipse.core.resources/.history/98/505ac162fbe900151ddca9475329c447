package cs263w16;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.api.appidentity.AppIdentityServicePb.SigningService.Method;
import com.google.appengine.api.blobstore.BlobKey;
import com.google.appengine.api.blobstore.BlobstoreService;
import com.google.appengine.api.blobstore.BlobstoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.images.Image;
import com.google.appengine.api.images.ImagesService;
import com.google.appengine.api.images.ImagesServiceFactory;
import com.google.appengine.api.images.Transform;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

public class ImageOperateServlet extends HttpServlet{
	private UserService userService=UserServiceFactory.getUserService();
	private DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
	private MemcacheService syncCache=MemcacheServiceFactory.getMemcacheService();
	private ImagesService imagesService=ImagesServiceFactory.getImagesService();
	private BlobstoreService blobstoreService=BlobstoreServiceFactory.getBlobstoreService();
	
	@Override
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//super.doGet(req, resp);
		
		if(userService.getCurrentUser()==null) 
		{
			resp.sendRedirect("/login");
			return;
		}
		
		String method=req.getParameter("method");
		String imgKeyName=req.getParameter("img-key");
		
		if(method==null || imgKeyName==null) 
		{
			resp.getWriter().println("Not a valid image operation URL!");
			return;
		}
		else
		{
			byte[] newImageData = null;
			
			Entity ent;
			Key imgKey=KeyFactory.stringToKey(imgKeyName);
			
			if(syncCache.get(imgKeyName)!=null)
			{
				ent=(Entity) syncCache.get(imgKeyName);
			}
			else
			{
			
			Filter keyFilter = new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, FilterOperator.EQUAL, imgKey);
	        Query keyBasedQuery = new Query("Photo").setFilter(keyFilter);
	        List<Entity> results = datastore.prepare(keyBasedQuery).asList(FetchOptions.Builder.withDefaults());
			
	        if(results.isEmpty()) {resp.getWriter().println("Nothing found!");return;}
	        else {ent=results.get(0);syncCache.put(imgKeyName, ent);}
			}
	        
			BlobKey blobKey=(BlobKey) ent.getProperty("blobKey");
			Image originalImage=ImagesServiceFactory.makeImageFromBlob(blobKey);
				
			//if(originalImage.getImageData()==null) {resp.getWriter().println("Something wrong with blobKey!");return;}
			resp.setContentType("text/html");
			resp.getWriter().println("<html><body>");
			resp.getWriter().println(originalImage.getImageData());
			//resp.getWriter().println("<img src="+"\"/serve?blob-key=" + blobKey.getKeyString()+"\">");
			resp.getWriter().println("</body></html>");
			
//				Transform resize=ImagesServiceFactory.makeResize(640, 360);
//				Image oldImage=imagesService.applyTransform(resize, originalImage);
//				
//				Image newImage = null;
//				
//	        	if(method.equals("1"))
//				{
//					Transform verticalFlip=ImagesServiceFactory.makeVerticalFlip();
//					newImage=imagesService.applyTransform(verticalFlip, oldImage);
//				}
//	        	else if(method.equals("2"))
//	        	{
//	        		Transform horizontalFlip=ImagesServiceFactory.makeHorizontalFlip();
//					newImage=imagesService.applyTransform(horizontalFlip, oldImage);
//				}
//	        	else if(method.equals("3"))
//	        	{
//	        		Transform rotate=ImagesServiceFactory.makeRotate(90);
//					newImage=imagesService.applyTransform(rotate, oldImage);
//	        	}
//	        	else if(method.equals("4"))
//	        	{
//	        		Transform rotate=ImagesServiceFactory.makeRotate(-90);
//					newImage=imagesService.applyTransform(rotate, oldImage);
//	        	}
//	        	else if(method.equals("5"))
//	        	{
//	        		Transform feelLucky=ImagesServiceFactory.makeImFeelingLucky();
//	        		newImage=imagesService.applyTransform(feelLucky, oldImage);	
//	        	}
//	        	else {
//	        		resp.getWriter().println("Wrong method input!");
//	        		return;
//				}
//	        	
//	        	newImageData=newImage.getImageData();
//	        	resp.getWriter().println(newImageData);
//	        	resp.getWriter().println("<a href=\"/image?img-key="
//	        			+imgKeyName
//	        			+"\">"
//	        			+"<h2>Back to original image!</h2>"
//	        			+"</a>");
	        }	   
		
	}
	
	@Override
	public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//super.doPost(req, resp);
		if(userService.getCurrentUser()==null) 
		{
			resp.sendRedirect("/login");
			return;
		}
		
		String method=req.getParameter("method");
		String imgKeyName=req.getParameter("img-key");
		String width=req.getParameter("width");
		String height=req.getParameter("height");
		String downsize=req.getParameter("downsize");
		String upsize=req.getParameter("upsize");
		
		int widthNum = Integer.parseInt(width);
		int heightNum = Integer.parseInt(height);
		int downsizeNum = Integer.parseInt(downsize);
		int upsizeNum = Integer.parseInt(upsize);

		
		if(method==null || imgKeyName==null) 
		{
			resp.getWriter().println("Not a valid image operation URL!");
			return;
		}
		else
		{
byte[] newImageData = null;
			
			Entity ent;
			Key imgKey=KeyFactory.stringToKey(imgKeyName);
			
			if(syncCache.get(imgKeyName)!=null)
			{
				ent=(Entity) syncCache.get(imgKeyName);
			}
			else
			{
			
			Filter keyFilter = new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, FilterOperator.EQUAL, imgKey);
	        Query keyBasedQuery = new Query("Photo").setFilter(keyFilter);
	        List<Entity> results = datastore.prepare(keyBasedQuery).asList(FetchOptions.Builder.withDefaults());
			
	        if(results.isEmpty()) {resp.getWriter().println("Nothing found!");return;}
	        else {ent=results.get(0);syncCache.put(imgKeyName, ent);}
			}
	        
			BlobKey blobKey=(BlobKey) ent.getProperty("blobKey");
			Image originalImage=ImagesServiceFactory.makeImageFromBlob(blobKey);
				
			if(originalImage.getImageData()==null) {resp.getWriter().println("Something wrong with blobKey!");return;}
	       	
				Transform preResize=ImagesServiceFactory.makeResize(640, 360);
				Image oldImage=imagesService.applyTransform(preResize, originalImage);
				
				Image newImage = null;
				
	        	if(method.equals("6"))
				{
					Transform resize=ImagesServiceFactory.makeResize(widthNum, heightNum);
					newImage=imagesService.applyTransform(resize, originalImage);
				}
	        	else if(method.equals("7"))
	        	{
	        		Transform resize=ImagesServiceFactory.makeResize(640/downsizeNum, 360/downsizeNum);
					newImage=imagesService.applyTransform(resize, originalImage);
				}
	        	else if(method.equals("8"))
	        	{
	        		if(640*upsizeNum>originalImage.getWidth()||360*upsizeNum>originalImage.getHeight())
	        			newImage=originalImage;
	        		else{
	        			Transform resize=ImagesServiceFactory.makeResize(640*upsizeNum, 360*upsizeNum);
						newImage=imagesService.applyTransform(resize, originalImage);
					}
	        	}
	        	else {
	        		resp.getWriter().println("Wrong method input!");
	        		return;
				}
	        	
	        	newImageData=newImage.getImageData();
	        	resp.getWriter().println(newImageData);
	        	resp.getWriter().println("<a href=\"/image?img-key="
	        			+imgKeyName
	        			+"\">"
	        			+"<h2>Back to original image!</h2>"
	        			+"</a>");
	        }
		
	}

}
