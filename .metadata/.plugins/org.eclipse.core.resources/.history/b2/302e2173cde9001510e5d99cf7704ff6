package cs263w16;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.api.blobstore.BlobKey;
import com.google.appengine.api.blobstore.BlobstoreService;
import com.google.appengine.api.blobstore.BlobstoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.datastore.Query;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.images.Image;
import com.google.appengine.api.images.ImagesService;
import com.google.appengine.api.images.ImagesServiceFactory;
import com.google.appengine.api.memcache.ErrorHandlers;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

@SuppressWarnings("serial")
public class ImageShowServlet extends HttpServlet{
	
	private UserService userService=UserServiceFactory.getUserService();
	private DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
	private MemcacheService syncCache=MemcacheServiceFactory.getMemcacheService();
	private ImagesService imagesService=ImagesServiceFactory.getImagesService();
	private BlobstoreService blobstoreService=BlobstoreServiceFactory.getBlobstoreService();
	
	public void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException
	{
		syncCache.setErrorHandler(ErrorHandlers.getConsistentLogAndContinue(Level.INFO));
		
		if(req.getUserPrincipal()==null) resp.sendRedirect("/login");
		else
		{
			String imgKeyName=req.getParameter("img-key");
			
			resp.setContentType("text/html");
			resp.getWriter().println("<html><body>");
			resp.getWriter().println("<style>"
					+ "#header {"
					+ "background-color:black;"
					+ "color:white;"
					+ "text-align:center;"
					+ "padding:5px;"
					+ "}"
					+ ""
					+ "#nav1 {"
					+ " line-height:30px;"
					+ "background-color:#eeeeee;"
					+ "height:300px;"
					+ "width:100px;"
					+ "float:left;"
					+ "padding:5px; "
					+ "}"
					+ ""
					+ "#section {"
					+ "width:350px;"
					+ "float:left;"
					+ "padding:10px; "
					+ "}"
					+ "#nav2 {"
					+ " line-height:30px;"
					+ "background-color:#eeeeee;"
					+ "height:300px;"
					+ "width:200px;"
					+ "float:right;"
					+ "padding:5px; "
					+ "}"
					+ "</style>");
			
			if(!req.getParameterNames().hasMoreElements() || imgKeyName==null)
			{
				resp.getWriter().println("<h1>Please input valid show URL!</h1>");
			}
			else
			{
				
				Key imgKey=KeyFactory.stringToKey(imgKeyName);
			
				Filter keyFilter = new FilterPredicate(Entity.KEY_RESERVED_PROPERTY, FilterOperator.EQUAL, imgKey);
		        Query keyBasedQuery = new Query("Photo").setFilter(keyFilter);
		        List<Entity> results = datastore.prepare(keyBasedQuery).asList(FetchOptions.Builder.withDefaults());
		        
		        if(results.isEmpty()) resp.getWriter().println("Nothing found!");
		        else {
		        	
		        	Key photoKey=results.get(0).getKey();
					String PhotoURL=(String) results.get(0).getProperty("imageURL");
					String imgWidth=(String) results.get(0).getProperty("imgWidth");
					String imgHeight=(String) results.get(0).getProperty("imgHeight");
					String blobKeyString=(String) results.get(0).getProperty("blobKey");
					
					Query photoQuery = new Query("Comment")
		                    .setAncestor(photoKey);
					List<Entity> commentResults = datastore.prepare(photoQuery)
		                    .asList(FetchOptions.Builder.withDefaults());
					
					resp.getWriter().println("<div id=\"section\">"
							+ "<img src="
							+PhotoURL
							+" "
							+"style=\"width:"
							+ "640px;height:"
							+ "360px;\">"
							+"</div>");
					
					resp.getWriter().println("<div id=\"section\">");
					resp.getWriter().println("<a href=\"/flip\">Vertical-Flip</a>");
					resp.getWriter().println("<a href=\"/overturn\">Horizontal-Flip</a>")
					resp.getWriter().println("<a href=\"/overturn\">Upside-Down</a>");
					resp.getWriter().println("<div id=\"nav1\">");
					
					resp.getWriter().println("<div id=\"nav2\">");
					if(commentResults.isEmpty()) resp.getWriter().println("<h1>No comments!</h1>");
					else
					{
						for(Entity comment: commentResults)
						{
							resp.getWriter().println("<h2>"
						+comment.getProperty("content")
						+"</h2>");
							resp.getWriter().println("<h5>by "
									+comment.getProperty("author")
									+"  "
									+comment.getProperty("date")
									+"</h5>");
						}
					}
					
					resp.getWriter().println("<p>Enter your comment below</p>"
							+ "<form action=\"/enqueue"
							+"?imgKey="
							+ photoKey.getName()
							+ "\" method=\"post\">"
							+ "<input type=\"text\" name=\"content\">"
							+ "</form>");				
					
					
					BlobKey blobKey=blobstoreService.createGsBlobKey(blobKeyString);
					Image myImage=ImagesServiceFactory.makeImageFromBlob(blobKey); 
					
					
					
					
				}	
		    }
			
			resp.getWriter().println("</body></html>");
			
		}
		
	}
}
