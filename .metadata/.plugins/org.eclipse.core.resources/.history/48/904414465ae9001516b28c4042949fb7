package cs263w16;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.Entity;
import com.google.appengine.api.datastore.FetchOptions;
import com.google.appengine.api.datastore.Key;
import com.google.appengine.api.datastore.KeyFactory;
import com.google.appengine.api.memcache.ErrorHandlers;
import com.google.appengine.api.memcache.MemcacheService;
import com.google.appengine.api.memcache.MemcacheServiceFactory;
import com.google.appengine.api.users.User;
import com.google.appengine.api.users.UserService;
import com.google.appengine.api.users.UserServiceFactory;

import com.google.appengine.api.datastore.DatastoreServiceFactory;
import com.google.appengine.api.datastore.DatastoreService;
import com.google.appengine.api.datastore.Query.Filter;
import com.google.appengine.api.datastore.Query.FilterPredicate;
import com.google.appengine.api.datastore.Query.FilterOperator;
import com.google.appengine.api.datastore.Query.CompositeFilter;
import com.google.appengine.api.datastore.Query.CompositeFilterOperator;
import com.google.appengine.api.datastore.Query;

@SuppressWarnings("serial")
public class UserServlet extends HttpServlet{
	
	private UserService userService=UserServiceFactory.getUserService();
	private DatastoreService datastore=DatastoreServiceFactory.getDatastoreService();
	private MemcacheService syncCache=MemcacheServiceFactory.getMemcacheService();
	
	public void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException
	{
		syncCache.setErrorHandler(ErrorHandlers.getConsistentLogAndContinue(Level.INFO));

		if(userService.getCurrentUser()==null)
		{
			resp.sendRedirect("/login");
		}
		else	
		{
			resp.setContentType("text/html");
			resp.getWriter().println("<html>");
			resp.getWriter().println("<style>");
			resp.getWriter().println("img {"
					+ "width:200px;"
					+ "height:128px;"
					+ "}"
					+ ".clear {"
					+ "clear:both;"
					+ "}"
					
					+ "#grid {"
					+ "width: 620px;"
					+ "margin: 40px 130px;"
					+ "}"
					
					+ ".grid-element {"
					+ "float:left;"
					+ "padding: 2px;"
					+ "}"
					
					+ "aside {"
					+ "position: relative;"
					+ "left: 120px;"
					+ "top: 100px;"
					+ "}"
					
					+ "footer, h1, h2 {"
					+ "text-align: center;"
					+ "}"
					
					+ "h1 {"
					+ "font-family: 'Great Vibes', cursive;"
					+ "font-size: 60px;"
					+ "margin: 6px;"
					+ "}"
					
					+ "body {"
					+ "font-family: 'Lato', sans-serif;"
					+ "background-color: #B1F2FF;"
					+ "}"
					
					+ "footer {"
					+ "padding: 10px;"
					+ "}"
					
					+ "div, aside, article {"
					+ "border: 1px solid red;"
					+ "}");
			resp.getWriter().println("</style>");
			
			resp.getWriter().println("<head>"
	    		+ "<meta charset=\"UTF-8\">"
	    		+ "<title>Photo Gallery Project</title>"
	    		+ "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\">"
	    		+ "<link href='http://fonts.googleapis.com/css?family=Lato|Great+Vibes' rel='stylesheet' type='text/css'>"
	    		+ "</head>");
			
			resp.getWriter().println("<body>");
			
			User curUser=userService.getCurrentUser();	
			Key userKey=KeyFactory.createKey("User", curUser.getUserId());
			
			Entity user=new Entity("User",curUser.getUserId());
			datastore.put(user);
			syncCache.put(curUser.getUserId(), user);
			
			Query photoQuery = new Query("Photo")
                    .setAncestor(userKey);
			
			List<Entity> results = datastore.prepare(photoQuery)
                    .asList(FetchOptions.Builder.withDefaults());

			resp.getWriter().println("<h1>Hello!</h1>");
			
			if(results.isEmpty())
			{
				resp.getWriter().println("<h1>You have yet added any photos</h1>");
			}
			else
			{
				resp.getWriter().println("<h1>Here is your photo gallery!</h1>");

				for(Entity result: results)
				{
					resp.getWriter().println( "<div class=\"grid-element\">"
							+"<img src="
							+ result.getProperty("ImageURL")
							+ "alt=\"berries\">"
							+"</div>");	
				}
			}
			
			resp.getWriter().println("</body></html>");
			
		}
	}
}
